1. Sự khác biệt giữa method GET, POST là gì ?
- GET: dữ liệu được truyền thông qua URL. 
- POST: dữ liệu thường được truyền thông qua HTTP  header, parameter nằm trong body của request.
Tuy POST bảo mật hơn GET nhưng POST vẫn không hoàn toàn an toàn. VD: nếu sử dụng wifi công cộng không bảo mật thì có thể bị hacker sử dụng
kĩ thuật sniffing bắt gói tin và có thể sửa đổi, vậy nên cần phương thức HTTPS để mã hoá gói tin.
khởi tạo tài nguyền ?
GET không làm thay đổi trạng thái của tài nguyên
POST có khả năng thay đổi trạng thái của tài nguyên
-------------------------------------------------------------------------------
2. Tìm hiểu thêm về method PUT, PATCH
- PUT dùng để cập nhật toàn bộ nội dung của tài nguyên trên máy chủ.
VD: 
GET /student/2
-> response:
{
"name" = "Nam",
"age" = 20,
"gpa" = 2.2
}
PUT /student/2 với request body:
{"gpa" = 3.0} 
-> response: 
{
"gpa" = 3.0
}

- PATCH chỉ cập nhật những phần của tài nguyên mà client yêu cầu thay đổi 
VD: PUT /student/2 với request body:
{"gpa" = 3.0} 
-> response: 
{
"name" = "Nam",
"age" = 20,
"gpa" = 3.0
}
-------------------------------------------------------------------------------------
3. Tìm hiểu xem action khi sử dụng hàm save, delete của Spring JPA (nâng cao)
Có 3 trạng trái của thực thể: 
VD: + transient:
	Person person = new Person();
	person.setName("Nam"); 
    + persistent:
	session.persist(person);
    + detached:
	session.evict(person);

- persist(): thêm một thực thể mới vào persistence context, chuyển đổi thực thể từ trạng thái transient sang persistent.
Thực thể không ngay lập tức được lưu vào cơ sở dữ liệu. Chỉ lưu khi commit giao dịch hoặc làm mới (flush) session.

- save(): sử dụng để lưu một thực thể vào cơ sở dữ liệu. Nếu thực thể đã persistent hoặc detached, 
có thể dẫn đến việc tạo ra bản ghi trùng lặp trong cơ sở dữ liệu.
VD:
Person person = new Person();
person.setName("Nam");
session.save(person);

person.setName("Quang");
session.save(person);
-> nó sẽ không cập nhật bản ghi cũ mà lại lưu 1 bản ghi mới có tên là Quang.

- update(): chuyển đổi một thực thể từ trạng thái detached sang persistent và cập nhật nó vào cơ sở dữ liệu. Update một
thực thể transient sẽ gây ra ngoại lệ. 

- merge(): sử dụng để cập nhật một thực thể persistent từ một thực thể detached. 
VD: 
person.setName("Nam");
session.persist(person);
session.commit();
session.close();
// person đã bị detached.

Session newSession = sessionFactory.openSession();
newSession.beginTransaction();
Person mergedPerson = (Person) newSession.merge(person);
newSession.getTransaction().commit();

Cái gì quản lý cái này ?
-------------------------------------------------------------------------------------
4. Sự khác nhau giữa annotation Service, Repository, Component.
-> đều đánh dấu các bean và phân biệt chúng theo các tầng khác nhau trong kiến trúc ứng dụng.
- Chia tầng để mỗi tầng tập trung cho 1 mối quan tâm cụ thể, làm giảm độ phức tạp của code và dễ phát triển, bảo trì và bảo mật hơn vì
dữ liệu đi qua các tầng phải qua các lớp kiểm tra.
VD: nếu đặt @Service cho 1 class làm việc với database thay vì @Repositorty thì vẫn có thể sử dụng class ấy như bình thường vì
cả 2 đều là các specialization của @Component, Spring sẽ tự động phát hiện và quản lý bean như bình thường nhưng mà nó 
sẽ dễ gây nhầm lẫn và khó bảo trì sau này.
___
Bean là gì ?
=========================================
--------------------------------------------------------------
liên quan đến mô hình MVC -> 
class ?
layer ?

class là 1 đối tượng cụ thể, layer thì là sự phân chia ứng dụng thành các phần khác nhau với 1 chức năng cụ thể

VD: 1 class model sẽ chứa dữ liệu và các method liên quan đến 1 model; trong khi 1 model layer thì là tập hợp các class model
để tạo nên 1 tầng chỉ tập trung quản lý, xử lý model.
----------------------------------------------------------------------------------------
sao java là hướng đối tượng?
vì java hỗ trợ các đặc tính cơ bản của OOP: Đa hình (Polymorphism), Kế thừa(Inheritance), Đóng gói (Encapsulation),
và Trừu tượng (Abstraction)
VD: golang không phải ngôn ngữ OOP vì nó không có khái niệm class hay kế thừa thay vào đó là structs, interfaces
-------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------
1. OOP concepts ?
1.1. Tính đóng gói -> private ?
đóng gói là kỹ thuật ẩn giấu thông tin không liên quan và chỉ hiển thị thông tin liên quan,
giúp giảm thiểu mức độ phức tạp trong phát triển phần mềm.
VD: Customer có 1 biến public account_budget. nếu không ẩn, giới hạn quyền truy cập của biến này thì người khác có thể
truy cập và sửa đổi account_budget đi. Thay vào đó, đổi biến account_budget thành private chỉ cho phét truy cập bên trong class,
từ đó muốn sửa account_budget thì phải dùng hàm set, và có thể chèn thêm các phương thức bảo mật vào trong hàm này.

Private: Chỉ có thể truy cập trong nội bộ lớp.
Protected: Có thể truy cập trong cùng một package hoặc thông qua kế thừa.
Default: Có thể truy cập trong cùng một package 
Public: Có thể truy cập từ bất kỳ đâu


1.2. Tính kế thừa -> extend ?
là cho phép 1 subclass có thể thừa hưởng các thuộc tính và phương thức của một lớp khác - superclass.
Kế thừa giúp tái sử dụng code, và việc bảo trì, mở rộng chức năng phần mềm tốt hơn. 

1.3. Tính đa hình -> overriding , overloading -> tên method, tham số truyền vào, output ?
Overriding (Ghi đè): Overriding xảy ra khi 1 method trong lớp con có cùng tên, cùng danh sách tham số với 1 phương thức trong 
lớp cha.
VD:
class Animal {
    void eat() {
        System.out.println("eat by animal");
    }
}

class Lion extends Animal {
    @Override
    void eat() {
        System.out.println("eat by lion");
    }
}

public class Test{
    public static void main(String args[]) {
        Animal animal= new Lion();
        animal.eat(); // Gọi phương thức eat đã được override trong lớp Dog
    }
}
-> eat by lion

Overloading: Overloading cho phép tồn tại 2 hàm cùng tên nhưng khác danh sách tham số, giúp code dễ đọc hơn.
1.4. Tính trừu tượng -> abstract, interface ?
Tính trừu tượng giúp lập trình viên tập trung vào một đối tượng làm "cái gì" làm mà không phải lo lắng về "làm thế nào" nó thực hiện 
điều đó.

Có 2 loại trừu tượng hoá:
-Trừu tượng hóa dữ liệu: thể hiện qua việc ẩn đi dữ liệu của đối tượng để không hiển thị ra bên ngoài.
Chỉ cung cấp hàm tương tác với dữ liệu mà không cần biết chi tiết về dữ liệu.
VD: dùng getTuition() để xem tiền nộp học phí mà không cần biết thông tin chi tiết của học phí.

Trừu tượng hóa quy trình: thể hiện qua việc ẩn đi chi tiết về cách thực hiện chức năng của đối tượng.
VD: cung cấp method retakeCourse(Course course) để đăng kí học lại mà không cần biết chi tiết cách thực hiện xử lý đăng kí học lại 
cho sinh viên như thế nào

+ Abstract class sử dụng khi cần constructor, method không phải public. "A is a B"
+ Interface sử dụng khi cần đa kế thừa hoặc khi muốn định nghĩa 1 lớp contract. Lớp contract sẽ liệt kê các
hàm triển khai mà các lớp implement phải tuân theo và lớp implement sẽ thực hiện chi tiết quy trình của các hàm đấy.
"A is capable of doing B"

-----------------------------------------------------------------------------------------------
2. Java là tham chiếu hay tham trị ?
String a = "Thay Phu dep trai"
method(String a) -> gán a bằng 1 giá trị b -> return a -> kết quả là gì ?

- Tham trị: Khi truyền một biến kiểu nguyên thủy vào method, một bản sao của biến được tạo ra và truyền vào method.
Bất kỳ thay đổi nào đối với tham số trong method không ảnh hưởng đến biến bên ngoài method

- Tham chiếu: 
Khi truyền một đối tượng vào method, bản sao của địa chỉ trỏ đến đối tượng được truyền vào, không phải bản sao 
của chính đối tượng
Các thay đổi đối với thuộc tính của đối tượng trong method sẽ ảnh hưởng đến đối tượng ban đầu.

- Với String, mặc dù nó là kiểu tham chiếu, nhưng String trong Java là bất biến (immutable)

-> khi gán string a = "b" trong method thì method sẽ tạo a là 1 biến mới và a mới này sẽ tham chiếu đến chuỗi "b" trong
String pool, như vậy khi kết thúc method thì a vẫn = "Thay Phu dep trai"

VD:
public static void test(Animal x) {
        Animal y = new Animal();
        y.setName("Cat");
        x.setName("Dog");
	x = y;
    }

    public static void main(String[] args) {
        Animal x = new Animal("Lion");
        test(x);
        System.out.println(x.getName());
    }
-> Dog	
Vì khi biến x được truyền vào method thì sẽ truyền bản sao tham chiếu đến đối tượng x trong bộ nhớ Heap. x.setName("Dog") sẽ
set lại name của đối tượng x trong heap, x = y sẽ tham chiếu biến x đến đối tượng y trong heap. 
Nhưng khi ra ngoài method thì biến x vẫn đang tham chiếu đến đối thượng x mà thôi -> Dog

----------------------------------------------------------------------------------------
3. Integer, int ? Difference ? Integer num = 1, int num = 1 ? -> Wrapper class ?
- int là một kiểu dữ liệu nguyên thủy. Nó chứa giá trị số nguyên không thể là null. int sử dụng ít bộ nhớ hơn và nhanh hơn
- Integer là một wrapper class cho kiểu dữ liệu nguyên thủy int. Nó cung cấp một đối tượng để lưu trữ giá trị int, cùng với các 
phương thức thao tác và chuyển đổi giá trị. Integer có thể là null.
VD: autoboxing và unboxing cho phép chuyển đổi tự động giữa kiểu nguyên thủy và wrapper class tương ứng
Integer num1 = 1; // Autoboxing: tự động chuyển đổi từ int sang Integer
int num2 = num1; // Unboxing: tự động chuyển đổi từ Integer sang int

-------------------------------------------------------------------------------------------------------------
4. String, String Builder, String Buffer là gì ?
String -> imutable -> bất biến
- String: String là bất biến (immutable). Nghĩa là mỗi khi thực hiện thay đổi trên một đối tượng String, 
một đối tượng String mới sẽ được tạo ra thay vì thay đổi đối tượng hiện tại.

StringBuilder, StringBuffer  lưu trữ chuỗi ký tự là 1 mảng kí tự trong bộ nhớ heap.
Mảng này có thể thay đổi kích thước khi cần thiết, cho phép StringBuilder và StringBuffer thay đổi ký tự mà không cần tạo ra 
một đối tượng chuỗi mới

- StringBuilder không đồng bộ (non-synchronized), không an toàn khi sử dụng trong môi trường đa luồng nhưng lại nhanh hơn StringBuffer
- StringBuffer đồng bộ (synchronized), an toàn khi sử dụng trong môi trường đa luồng

Đồng bộ là đảm bảo chỉ 1 luồng truy cập tài nguyên tại một thời điểm. StringBuffer mất thời gian hơn nếu chỉ cần hoạt động trên đơn luồng
vì phải chịu chi phí xử lý bổ xung (overhead) cho việc đồng bộ hoá.

--------------------------------------------------------------------------------------------------------------
5. Constructor là gì ? this, super ?
Constructor là hàm khởi tạo đối tượng của một lớp.
- this: là biến tham chiếu được sử dụng để tham chiếu tới đối tượng của lớp hiện tại. 
- super: Từ khóa super trong Java là một biến tham chiếu được sử dụng để tham chiếu trực tiếp đến đối tượng của lớp cha gần nhất. 
Nếu không khai báo Constructor thì Java tự cung cấp default constructor không có tham số, không có hành động nào ngoài việc
khởi tạo đối tượng cho class. Nếu khai báo bất kỳ constructor nào khác , constructor mặc định sẽ không được tạo ra.


========================================================================================================================

Khi tìm hiểu -> lấy được ví dụ của riêng mình(có thể biến tấu từ ví dụ trên mạng)